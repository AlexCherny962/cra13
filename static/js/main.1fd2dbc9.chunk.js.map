{"version":3,"sources":["Counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","align","onClick","minus","index","count","plus","removeCounter","resetCounter","App","useState","counters","setCounters","newCounters","splice","plusOne","minusOne","className","map","element","key","randomNumber","Math","round","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qLAEe,SAASA,EAAQC,GAQ5B,OACE,yBAAKC,MAAO,UAEV,4BAAQC,QARJ,kBAAMF,EAAMG,MAAMH,EAAMI,SAQ5B,KAECJ,EAAMK,MAEP,4BAAQH,QAbJ,kBAAMF,EAAMM,KAAKN,EAAMI,SAa3B,KACA,4BAAQF,QAXJ,kBAAMF,EAAMO,cAAcP,EAAMI,SAWpC,0BACA,4BAAQF,QAXJ,kBAAMF,EAAMQ,aAAaR,EAAMI,SAWnC,0BChBO,SAASK,IAAM,MAMMC,mBAAS,CAAC,EAAG,EAAG,KANtB,mBAMnBC,EANmB,KAMTC,EANS,KAgBpBL,EAAgB,SAACH,GACrB,IAAIS,EAAW,YAAOF,GACtBE,EAAYC,OAAOV,EAAO,GAC1BQ,EAAYC,IAGRL,EAAe,SAACJ,GACpB,IAAIS,EAAW,YAAOF,GACtBE,EAAYT,GAAS,EACrBQ,EAAYC,IAORE,EAAU,SAACX,GAEf,IAAIS,EAAW,YAAOF,GAEtBE,EAAYT,GAAOS,EAAYT,GAAO,EAEtCQ,EAAYC,IAGRG,EAAW,SAACZ,GAEhB,IAAIS,EAAW,YAAOF,GACtBE,EAAYT,IAAU,EACtBQ,EAAYC,IAId,OACE,yBAAKI,UAAW,MAAOhB,MAAO,UAM5BU,EAASO,KAAI,SAACC,EAASf,GAAV,OACZ,kBAACL,EAAD,CACEM,MAAOc,EACPC,IAAKhB,EACLA,MAAOA,EAEPE,KAAMS,EACNZ,MAAOa,EACPT,cAAeA,EACfC,aAAcA,OAGlB,6BACF,4BAAQN,QA1DU,WACjB,IAAMmB,EAAeC,KAAKC,MAAsB,GAAhBD,KAAKE,UACrCZ,EAAY,GAAD,mBAAKD,GAAL,CAAeU,OAwD3B,sBACA,4BAAQnB,QA1CQ,WACfU,EAAY,YAAID,GAAUO,KAAI,SAAAC,GAAO,OAAI,QAyC1C,uBC7DeM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACvB,EAAD,OAEFwB,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1fd2dbc9.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Counter(props) {\n\nconst add = () => props.plus(props.index);\nconst min = () => props.minus(props.index);\n// function min () {props.minus(props.index)}; // как вариант\nconst rem = () => props.removeCounter(props.index);\nconst res = () => props.resetCounter(props.index);\n\n    return (\n      <div align={\"center\"}>\n     {/*Count {props.count} Index {props.index}  // использовали для контроля */}\n        <button onClick={min}>-</button>\n     {/*<button onClick={function () {props.minus(props.index)}}>-</button>  // как вариант */}\n        {props.count}\n     {/*<button onClick={() => props.plus(props.index)}>+</button>  // как вариант */}\n        <button onClick={add}>+</button>\n        <button onClick={rem}>Remove current counter</button>\n        <button onClick={res}>Reset current counter</button>\n      </div>\n  );\n}","import React, {useState} from 'react';\nimport Counter from \"./Counter.js\"\n\nexport default function App() {\n    // const [] = useState([{\n    //     id: 'Q1',\n    //     count:3\n    // }])\n\n    const [counters, setCounters] = useState([4, 8, 34]);\n    // const addCounter = () => {console.log('Add counter', counters)};\n    // const addCounter = () => {setCounters([...counters, 5])\n    // };\n\n    const addCounter = () => {\n      const randomNumber = Math.round(Math.random() * 10);\n      setCounters([...counters, randomNumber]) // делаем ререндеринг массива счетчиков\n                             };\n\n    const removeCounter = (index) => {\n      let newCounters = [...counters]; // делаем новую копию массива\n      newCounters.splice(index, 1); // удаляем элемент массива счетчиков с индексом index\n      setCounters(newCounters); // делаем ререндеринг массива счетчиков\n                                     };\n\n    const resetCounter = (index) => {\n      let newCounters = [...counters]; // делаем новую копию массива\n      newCounters[index] = 0;\n      setCounters(newCounters); // делаем ререндеринг массива счетчиков\n                                    };\n\n    const resetAll = () => {\n      setCounters([...counters].map(element => 0)); // делаем ререндеринг массива счетчиков\n                           };\n\n    const plusOne = (index) => {\n   // console.log('plusone', index, counters)\n      let newCounters = [...counters];\n   // newCounters[index] += 1; // как вариант\n      newCounters[index]=newCounters[index]+1\n   // newCounters[index]++; // как вариант\n      setCounters(newCounters); // делаем ререндеринг массива счетчиков\n   // setCounters(counters[index+1]); // ошибка!\n    }\n    const minusOne = (index) => {\n   // console.log('minusone', index, counters);\n      let newCounters = [...counters];\n      newCounters[index] -= 1;\n      setCounters(newCounters); // делаем ререндеринг массива счетчиков\n   // setCounters(counters[index]-1); // ошибка!\n    }\n\n    return (\n      <div className={\"App\"} align={\"center\"}>\n    {/*App*/}\n    {/*{console.log('Add counter', counters)}*/}\n    {/*<Counter count={3} />*/}\n    {/*<Counter count={8} />*/}\n    {/*<hr/>*/}\n       {counters.map((element, index) => (\n         <Counter\n           count={element} // значение счетчика\n           key={index}     // внутренний id React'а\n           index={index}   // индекс элемента\n           // ссылки на 4 функции, которые реализованы в Counter.js в 4 кнопках\n           plus={plusOne}\n           minus={minusOne}\n           removeCounter={removeCounter}\n           resetCounter={resetCounter}\n         />\n       ))}\n       <hr/>\n     <button onClick={addCounter}>Create new counter</button>\n     <button onClick={resetAll}>Reset all counters</button>\n   </div>\n );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}